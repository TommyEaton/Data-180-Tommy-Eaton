library ("MASS")
library("MASS")
# Install library
install.packages("readxl")
#Call library
library("readxl")
library("MASS")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("\Users\tommyeaton\Desktop\Data 180 Tommy Eaton\Data-180-Tommy-Eaton")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("Users\tommyeaton\Desktop\Data 180 Tommy Eaton\Data-180-Tommy-Eaton")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("/Users/tommyeaton/Desktop/Data 180 Tommy Eaton/Data-180-Tommy-Eaton")
my_data<-data.frame(
col_1 = c("A","B","C","D", "E"),
col_2 = c(1,2,3,4,5),
col_3 = c(1,12,3,4,5.4)
)
my_data
# Create a vector of numbers
vec<-1:10
vec
stripchart(Cars93$MPG.city,method="stack",pch=16,cex.axis=1.2,cex.lab=1.2,xlab = "Miles per Gallon")
stripchart(Cars93$Length,method="stack",pch=16,cex.axis=1.2,cex.lab=1.2,xlab="Length (inches)")
#2.
# READ DIRECTLY FROM THE FOLDER
p_data<-read_excel("D:/Dickinson College Teaching/DATA 180/particulate data.xlsx")
#3. Read CSV
p_data_csv = read.csv("D:/Dickinson College Teaching/DATA 180/particulate data.csv")
#HISTOGRAM
hist(p_data$particulate,cex.lab=1.2,cex.axis=1.2,col="lightgray",xlab="Particulate (g/gal)")
box()
read_excel("particulate data.xlsx") # Always keep in mind file extensions excel = .xlsx or .xls, Comma separated value = .csv
#2.
# READ DIRECTLY FROM THE FOLDER
p_data<-read_excel("/Users/tommyeaton/Desktop/Data 180 Tommy Eaton/Data-180-Tommy-Eaton/particulate data.xlsx")
#3. Read CSV
p_data_csv = read.csv("/Users/tommyeaton/Desktop/Data 180 Tommy Eaton/Data-180-Tommy-Eaton/particulate data.csv")
#HISTOGRAM
hist(p_data$particulate,cex.lab=1.2,cex.axis=1.2,col="lightgray",xlab="Particulate (g/gal)")
# A function that returns the circumference of a circle given its radius
circumference <- function(r){
2*pi*r
}
print(circumference(2))
print(circumference(6))
print(my_name())
# A function that always prints your name
my_name <- function(){
'Kennedy Odongo'
}
print(my_name())
# A function that sums two numbers
sum_two_nums <- function(x, y) {x + y}
print(sum_two_nums(3,4))
person<- c("Alice","Bob","Charlie", "Denise","Erin", "Frank", "Gisele", "Harry")
person<- c("Alice","Bob","Charlie", "Denise","Erin", "Frank", "Gisele", "Harry")
preference<- c("Twitter", "Facebook", "Twitter", "Instagram", "Facebook", "Twitter", "Twitter", "Instagram")
my_df<- c(person,preference)
# Your code goes here
person<- c("Alice","Bob","Charlie", "Denise","Erin", "Frank", "Gisele", "Harry")
preference<- c("Twitter", "Facebook", "Twitter", "Instagram", "Facebook", "Twitter", "Twitter", "Instagram")
my_df<- c(person,preference)
my_df<- c(person,preference)
my_df<- data.frame(person,preference)
person<- c("Alice","Bob","Charlie", "Denise","Erin", "Frank", "Gisele", "Harry")
preference<- c("Twitter", "Facebook", "Twitter", "Instagram", "Facebook", "Twitter", "Twitter", "Instagram")
my_df<- data.frame(person,preference)
my_df
nrows(my_df), ncols(my_df)
nrows(my_df)
nrow(my_df)
ncol(my_df)
table(my_df, Twitter)
table(my_df(person), my_df(preference))
table(my_df$person, my_df$preference)
table(my_df$preference, my_df$person)
table(my_df$preference)
table(my_df$Gisele)
table(my_df$person)
table(my_df$preference[7],my_df$person[7])
table(my_df$person[7],my_df$preference[7])
table(my_df$preference[7],my_df$person[7])
my_vec<- c(1,2,3,4,5,6,7,8,9,10)
my_vec
replace(2,my_vec,99)
replace([2],my_vec,99)
replace(2,my_vec,99)
replace(my_vec,2,99)
my_func(x)<- if(my_vec > 5){print("This element is greater than 5")}
my_func<- funtion(index_element)
my_func<- function(index_element)
if(my_vec[index_element] > 5) {print("This element is greater than 5")}
else{print("This element is NOT greater than 5!")}
{print("This element is NOT greater than 5!")}
my_func<- function(index_element){
if(my_vec[index_element] > 5)
{print("This element is greater than 5")}
else
{print("This element is NOT greater than 5!")}
}
my_func(6)
my_func(3)
# Your code goes here
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 1:n) {
cat(a," ")
next_num <- a + b
a <- b
b <- next_num
}
}
get_fibonacci(5)
get_fibonacci(7)
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 1:n) {
cat(n)
next_num <- a + b
a <- b
b <- next_num
}
}
get_fibonacci(5)
b <- next_num
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 1:n) {
cat(n, " ")
next_num <- a + b
a <- b
b <- next_num
}
}
get_fibonacci(5)
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 1:n) {
cat(a, " ")
next_num <- a + b
a <- b
b <- next_num
print("The",n,"number of the sequence is" ,next_num)
}
}
get_fibonacci(5)
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 1:n) {
cat(a, " ")
next_num <- a + b
a <- b
b <- next_num
print(next_num)
}
}
get_fibonacci(5)
print(b)
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 1:n) {
cat(a, " ")
next_num <- a + b
a <- b
b <- next_num
print(b)
}
}
get_fibonacci(5)
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 1:n) {
cat(a, " ")
next_num <- a + b
a <- b
b <- next_num
}
}
get_fibonacci(5)
get_fibonacci(5)
get_fibonacci(7)
get_fibonacci(5)
get_fibonacci(7)
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 1:n) {
cat(a, " ")
next_num <- a + b
a <- b
b <- next_num
}
}
get_fibonacci(19)
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 0:n) {
cat(a, " ")
next_num <- a + b
a <- b
b <- next_num
}
}
get_fibonacci(19)
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 0:n) {
cat(a, " ")
next_num <- a + b
a <- b
b <- next_num
}
}
get_fibonacci(5)
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 1:n) {
cat(a, " ")
next_num <- a + b
a <- b
b <- next_num
}
}
get_fibonacci(5)
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 1:n) {
cat(a, " ")
next_num <- a + b
a <- b
b <- next_num
}
}
get_fibonacci(19)
for(i in 0:n) {
cat(a, " ")
next_num <- a + b
a <- b
b <- next_num
}
get_fibonacci<- function(n) {
a <- 0
b <- 1
for(i in 0:n) {
cat(a, " ")
next_num <- a + b
a <- b
b <- next_num
}
}
get_fibonacci(19)
