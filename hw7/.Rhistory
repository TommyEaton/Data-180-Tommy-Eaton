# Custom options for knitting
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
fig.align = "center",
cache = FALSE
)
#library(tidyverse)
library(tm)
news<-read.csv("news.csv",header=T)
posWords <- scan("positive-words.txt", character(0), sep = "\n")  # 2006 items
negWords <- scan("negative-words.txt", character(0), sep = "\n")  # 4783 items
head(posWords,15)
head(negWords,15)
#library(tidyverse)
library(tm)
news<-read.csv("/Users/tommyeaton/Desktop/Data 180 Tommy Eaton/Data-180-Tommy-Eaton/hw7/news.csv",header=T)
library(tidyverse)
news <- read.csv("news.csv", header = TRUE)
str(news)
news$Date <- as.Date(news$Date, format = "%Y-%m-%d")
library(tidyverse)
news <- read.csv("news.csv", header = TRUE)
str(news)
news$Date <- as.Date(news$Date, format = "%Y-%m-%d")
library(tidyverse)
news <- read.csv("news.csv", header = TRUE)
str(news)
news$Date <- as.Date(news$Date)
library(tidyverse)
news <- read.csv("/Users/tommyeaton/Desktop/Data 180 Tommy Eaton/Data-180-Tommy-Eaton/hw7/news.csv", header = TRUE)
str(news)
news$Date <- as.Date(news$Date)
str(news)
unique_years <- unique(as.POSIXlt(news$publish_date)$year + 1900)
unique_years
# Check the structure of the news data frame
str(news)
# Assuming the date column is named 'date', you can extract the range of years
years <- as.numeric(format(as.Date(news$date, format="%Y-%m-%d"), "%Y"))
unique_years <- unique(years)
# Display the unique years
unique_years
news$date <- as.Date(news$date)
charVector <- news$headlines
head(charVector, 6)
wordVector <- VectorSource(charVector)
wordCorpus <- Corpus(wordVector)
print(wordCorpus)
tm_map(wordCorpus, content_transformer(tolower))
tm_map(wordCorpus, removePunctuation)
tm_map(wordCorpus, removeNumbers)
tm_map(wordCorpus, removeWords, stopwords("en"))
# Print the first paragraph after trimming
writeLines(as.character(wordCorpus[[1]]))
news$year <- as.integer(format(as.Date(news$publish_date, format = "%Y%m%d"), "%Y"))
unique_years <- unique(news$year)
cat("Unique Years:", unique_years, "\n")
cat("Number of Unique Years:", Length(unique_years), "\n")
news$year <- as.integer(format(as.Date(news$publish_date, format = "%Y%m%d"), "%Y"))
unique_years <- unique(news$year)
cat("Unique Years:", unique_years, "\n")
cat("Number of Unique Years:", length(unique_years), "\n")
charVector <- news$headline_text
cat("First 6 entries in charVector:\n")
cat(charVector[1:6], "\n")
wordVector <- VectorSource(charVector)
wordCorpus <- Corpus(wordVector)
cat("Preview of wordCorpus:\n")
print(wordCorpus)
wordCorpus <- tm_map(wordCorpus, content_transformer(tolower))
wordCorpus <- tm_map(wordCorpus, removePunctuation)
wordCorpus <- tm_map(wordCorpus, removeNumbers)
wordCorpus <- tm_map(wordCorpus, removeWords, stopwords("en"))
cat("Text after Trimming:\n")
cat(as.chacracter(wordCorpus[[1]]), "\n")
wordCorpus <- tm_map(wordCorpus, content_transformer(tolower))
wordCorpus <- tm_map(wordCorpus, removePunctuation)
wordCorpus <- tm_map(wordCorpus, removeNumbers)
wordCorpus <- tm_map(wordCorpus, removeWords, stopwords("en"))
cat("Text after Trimming:\n")
cat(as.character(wordCorpus[[1]]), "\n")
matrix <- as.matrix(tdm)
tdm <- TermDoucumentMatrix(wordCorpus)
tdm <- TermDocumentMatrix(wordCorpus)
cat("Term Document Matrix Summary:\n")
print(tdm)
matrix <- as.matrix(tdm)
wordCount <- rowSums(matrix)
top <- head(sort(wordCount, decreasing = TRUE), 10)
cat("10 most Frequent words:\n")
print(top)
freqWords <- rowSums(matrix) >= 50
barplot(wordCount[freqWords], las = 2, cex.names = .75, main = "Words That Appeared at least 50 Times", col = "blue")
axis(1, at = seq_along(wordCount[freqWords]), labels = names(wordCount)[freqWords], las = 2, cex.axis = .75)
posWordsLower <- tolower(posWords)
negWordsLower <- tolower(negWords)
posWordsLower <- tolower(posWords)
negWordsLower <- tolower(negWords)
# Question 8
# Convert positive and negative words to lowercase for case-insensitive matching
posWordsLower <- tolower(posWords)
negWordsLower <- tolower(negWords)
posWords <- scan("positive-words.txt", character(0), sep = "\n", encoding = "UTF-8")
negWords <- scan("negative-words.txt", character(0), sep = "\n", encoding = "UTF-8")
posWordsLower <- tolower(posWords)
negWordsLower <- tolower(negWords)
calculate_and_barplot <- function(words, title, threshold = 20) {
percentages <- wordCount[names(wordCount) %in% words] / sum(wordCount) * 100
frequent_words <- names(percentages)[percentages >= threshold]
barplot(percentages[frequent_words], main = title, xlab = "Words", ylab = "Percentage", col = "blue")
}
positive_words <- posWords
calculate_and_barplot(positive_words, "Positive Words")
calculate_and_barplot <- function(words, title, threshold = 20) {
# Calculate percentages
percentages <- wordCount[names(wordCount) %in% words] / sum(wordCount) * 100
# Filter words that showed up at least 20 times
frequent_words <- names(percentages)[percentages >= threshold]
# Create a barplot for the most frequent words
barplot(percentages[frequent_words], main = title, xlab = "Words", ylab = "Percentage", col = "blue")
}
# Positive Words
positive_words <- posWords
calculate_and_barplot(positive_words, "Positive Words")
calculate_and_barplot <- function(words, title, threshold = 20) {
# Calculate percentages
percentages <- wordCount[names(wordCount) %in% words] / sum(wordCount) * 100
# Filter words that showed up at least 20 times
frequent_words <- names(percentages)[percentages >= threshold]
if (length(frequent_words) == 0) {
cat("No words found that meet the threshold.\n")
return(NULL)
}
# Create a barplot for the most frequent words
barplot(percentages[frequent_words], main = title, xlab = "Words", ylab = "Percentage", col = "blue")
}
# Positive Words
positive_words <- posWords
calculate_and_barplot(positive_words, "Positive Words")
# Negative Words
negative_words <- negWords
calculate_and_barplot(negative_words, "Negative Words")
library(tm)
calculate_and_barplot <- function(words, title) {
percentages <- wordCount[names(wordCount) %in% words] / sum(wordCount) * 100
cat(paste("Percentage of", title, "Words:", percentages, "%\n"))
frequent_words <- wordCount[wordCount >= 20 & names(wordCount) %in% words]
if (length(freqwords) > 0 && all(is.finite(freqWords))) {
barplot(freqWords, las = 2, cex.names = .75, main = paste("Top", title, "Words(>=20)"), col = ifelse(title == "Positive", "red", "blue"))
axis(1, at = seq_along(freqWords), labels = names(freqWords), las = 2, cex.axis =.75)
} else {
cat("No data is valid for creating the Barplot of", title, :"words.\n")
library(tm)
calculate_and_barplot <- function(words, title) {
percentages <- wordCount[names(wordCount) %in% words] / sum(wordCount) * 100
cat(paste("Percentage of", title, "Words:", percentages, "%\n"))
frequent_words <- wordCount[wordCount >= 20 & names(wordCount) %in% words]
if (length(freqwords) > 0 && all(is.finite(freqWords))) {
barplot(freqWords, las = 2, cex.names = .75, main = paste("Top", title, "Words(>=20)"), col = ifelse(title == "Positive", "red", "blue"))
axis(1, at = seq_along(freqWords), labels = names(freqWords), las = 2, cex.axis =.75)
} else {
cat("No data is valid for creating the Barplot of", title, "words.\n")
}
}
calculate_and_barplot(posWords, "Positive")
news <- news %>% group_by(year,month) %>% mutate(count=n(), yearmonth = paste(year, month,sep = '/')) %>% arrange(year,month,day)
library(dplyr)
library(ggplot2)
ggplot(news, aes(x = factor(yearmonth, levels = unique(yearmonth)), y = count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Frequency of Articles Released by Year and Month",
x = "Year-Month",
y = "Number of Articles Released") +
theme(axis.text = element_text(size = 4, angle = 90)) +
scale_x_discrete(labels = function(x) gsub(" ", "\n", x))
library(dplyr)
library(ggplot2)
ggplot(news, aes(x = factor(yearmonth, levels = unique(yearmonth)), y = count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Frequency of Articles Released by Year and Month",
x = "Year-Month",
y = "Number of Articles Released") +
theme(axis.text = element_text(size = 4, angle = 90)) +
scale_x_discrete(labels = function(x) gsub(" ", "\n", x))
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
ggplot(news, aes(x = factor(yearmonth, levels = unique(yearmonth)), y = count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Frequency of Articles Released by Year and Month",
x = "Year-Month",
y = "Number of Articles Released") +
theme(axis.text = element_text(size = 4, angle = 90)) +
scale_x_discrete(labels = function(x) gsub(" ", "\n", x))
install.packages("ggplot2")
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
ggplot(news, aes(x = factor(yearmonth, levels = unique(yearmonth)), y = count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Frequency of Articles Released by Year and Month",
x = "Year-Month",
y = "Number of Articles Released") +
theme(axis.text = element_text(size = 4, angle = 90)) +
scale_x_discrete(labels = function(x) gsub(" ", "\n", x))
install.packages("quanteda")
install.packages("corpus")
library(quanteda)
library(corpus)
install.packages("quanteda")
library(quanteda)
term_stats_result <- term_stats(text_data, stopwords = stopwords("en"))
install.packages("quanteda")
install.packages("quanteda")
library(quanteda)
term_stats_result <- term_stats(text_data, stopwords = stopwords("en"))
library(quanteda)
term_stats_result <- term_stats(text_data, stopwords = stopwords("en"))
term_stats_result_bigrams <- term_stats(text_data, ngrams = 2, stopwords = stopwords("en"))
newscorpus <- corpus(text_data)
news_dtm <- dfm(newscorpus_paragraphs, remove = c("punctuation", "symbols", "numbers", stopwords("en")), stem = TRUE)
